uuid                       =>to generate random id
from uuid import uuid4     =>2a43ad7d-a52a-4ba3-9080-c35fe2ce76c0
print(uuid4())
































Raising custom error

raise ValueError          =>to raise value error 



use cases:                ' 
a=9                                                             =>traceback (most recent call last):
if(a==9):                                                         File "C:\Users\niraj\Downloads\practise\main.py", line 3, in <module>
   raise ValueError("Value shouldnot be 9")                        raise ValueError("Value shouldnot be 9")
                                                                    ValueError: Value shouldnot be 9




try:                                                              =>Error
    a=9
    if(a==9):
        raise ValueError("Value shouldnot be 9")
except:
    print("Error")

is vs ==



























Learn that multi inheritance in oop
we can inheritant multiple class in oop
class Human(Man,SocialAnimal):


class Nirajan:
    def get_name(self,name):
        return name
    def print_name(self,name):
        return self.get_name(name)


nirajan=Nirajan()
print(nirajan.print_name("nirajan"))
output=>nirajan
ascessing function which is inside class from function inside the class






















Dicnatory Unpacking in python
=>dictionary unpacking is one of the important concept.

for example:
a={"name":"nirajan","class":12,"fav_sub":"Maths"}
**a  =>this is dictionary unpacking that is equal to name="nirajan","class"=12,fab_sub="Maths"


List Unpacking in python
=>list unpacking is one of the important concept.

for example:
a=["nirajan","khatiwada"]
*a  =>this is List unpacking that is equal to "nirajan","khatiwada"











Time

=>Python time.time() Function
                  In Python, the time() function returns the number of seconds passed since epoch (the point where time begins).
                  
                  For the Unix system, January 1, 1970, 00:00:00 at UTC is epoch.
                  
                  Let's see an example,
                  
                  # import the time module
                  import time
                  
                  # get the current time in seconds since the epoch
                  seconds = time.time()
                  
                  print("Seconds since epoch =", seconds)	
                  
                  # Output: Seconds since epoch = 1672214933.6804628

Python time.sleep() Function
                  The sleep() function suspends (delays) execution of the current thread for the given number of seconds.
                  
                  import time
                  
                  print("Printed immediately.")
                  time.sleep(2.4)
                  print("Printed after 2.4 seconds.")












timedate       =>to do date and time operation
               =>import datetime











=>datetime.datetime.now()          =>return today date with time for example


code example:
import datetime
x=datetime.datetime.now()
print(x)

output:
2024-03-28 12:17:20.118952

another:
import datetime
x=datetime.datetime.now()
print(x.year,x.month,x.day,x.hour,x.minute,x.second)
print(x.date())
print("\n")
print(x)

output:
2024 3 28 12 41 23
2024-03-28


2024-03-28 12:41:23.830177











to make datetime object
datetime.datetime(2020,10,20)          =>make date time object of 2020 10 20

example:
import datetime
x=datetime.datetime(2020,10,20) 
print(x.year,x.month,x.day,x.second)
print("\n")
print(x)


output:
2020 10 20 0


2020-10-20 00:00:00
































asyncio
import asyncio
import requests
async def download(url,save):
    fs=open(save,"wb")
    data=requests.get(url)

    fs.write(data.content)
    fs.close()

async def main():
    output=await asyncio.gather(download("https://images.pexels.com/photos/23221538/pexels-photo-23221538/free-photo-of-a-white-flower-with-green-leaves-in-the-dark.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","lol.jpg"),download("https://images.pexels.com/photos/23221538/pexels-photo-23221538/free-photo-of-a-white-flower-with-green-leaves-in-the-dark.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1","2.jpg"))
    print(output)
    

asyncio.run(main())

print("sakkity")









single line and multiline comment 

#commet =>for single line comment
"""comment=>for multi line comment
comment"""

                                    


raw string in python
sorted function




True and false value in string
Falsy Values
These are values that are considered false in a boolean context:

false
0 (zero)
-0 (negative zero)
0n (BigInt zero)
"" (empty string)
null
undefined
NaN (Not-a-Number)
Truthy Values
All values that are not falsy are considered truthy. This includes:

true
Any non-zero number (e.g., 1, -1, 3.14)
Any non-empty string (e.g., "hello", " ")
Any object (e.g., {}, [])
function (e.g., function() {})
BigInt values other than 0n (e.g., 1n)



























1. Accessing a Global Variable in a Function
Global Variable: A variable declared outside of all functions, available to any part of your code.
Function: A block of code that performs a specific task and can use variables.
If you want to use a global variable inside a function, you can do it directly. However, if you want to modify the global variable inside the function, you need to use the global keyword.

Example:

python
Copy code
x = 10  # Global variable

def my_function():
    global x  # Declare that you want to use the global 'x'
    x = 20  # Now modify the global 'x'
    print(x)

my_function()  # This will print 20
print(x)  # This will also print 20 because 'x' was modified globally
Without the global keyword, any assignment to x inside the function would create a local variable x that doesn't affect the global x.

2. Raising an Error
Raising an Error: This is a way to stop your code and show that something went wrong.
When you know something is wrong and want to signal this to the user or developer, you can raise an error. This is done using the raise keyword followed by the type of error you want to raise.

Example:

python
Copy code
def check_age(age):
    if age < 0:
        raise ValueError("Age cannot be negative!")  # This will stop the function and show an error
    else:
        print("Age is valid.")

check_age(-1)  # This will raise a ValueError with the message "Age cannot be negative!"
You can raise different types of errors like ValueError, TypeError, IndexError, etc., depending on what went wrong.

3. Preventing Errors with .get() in Dictionaries
When you try to access an element in a list using an index that doesn't exist, or a key in a dictionary that isn't there, Python will raise an error.

List Example:

python
Copy code
my_list = [1, 2, 3]
print(my_list[5])  # This will raise an IndexError because index 5 doesn't exist
Dictionary Example:

python
Copy code
my_dict = {"name": "nirajan"}
print(my_dict["age"])  # This will raise a KeyError because "age" key doesn't exist
To prevent the error when accessing a dictionary, you can use the .get() method. This method returns None (or a default value you specify) if the key is not found, instead of raising an error.

Example:

python
Copy code
my_dict = {"name": "nirajan"}
print(my_dict.get("age"))  # This will return None instead of raising an error
print(my_dict.get("age", "Not Found"))  # This will return "Not Found" if "age" key doesn't exist
Using .get() is a safer way to access dictionary values when you're not sure if the key exists.
